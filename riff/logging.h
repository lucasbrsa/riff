/* default log format and colour from the beautiful rci/log.c */

/* @TODO multithread locking */
/* @TODO const the global writer's param */

#ifndef _LOGGING_H
#define _LOGGING_H

#include <stdio.h>
#include <time.h>

#include "os.h"

enum {
	LOGGING_DEBUG, LOGGING_INFO, LOGGING_NOTICE, LOGGING_WARN, LOGGING_ERROR, LOGGING_PANIC
};

/* set the log level, any logs with a level lower than this will not show */
void logging_set_level(unsigned l);

/* set the file written to by some writers */
void logging_set_file(FILE* fp);

/* all the data generated by a log, to be passed to a writer */
typedef struct {
	const char *message, *func, *file, *ftime;
	unsigned line, id, level;
	struct tm* tinfo;
} logging_msg_t;

/* a function that describes the transmission of log_msg_t */
typedef void (*logging_writer_f)(logging_msg_t* msg);

/* get the current writer */
void logging_get_writer(logging_writer_f writer);

/* set the current writer */
void logging_set_writer(logging_writer_f* writer);

/* write to stderr with ANSI colour codes if supported */
void logging_writer_coloured(logging_msg_t* msg);

/* write to stderr */
void logging_writer_stderr(logging_msg_t* msg);

/* write to stdout */
void logging_writer_stdout(logging_msg_t* msg);

/* write to a file */
void logging_writer_file(logging_msg_t* msg);

/* write to a syslog if it supported */
void logging_writer_syslog(logging_msg_t* msg);

/* write to stderr in ANSI colour and to a FILE* if provided */
void logging_writer_colourful_and_file(logging_msg_t* msg);

/* generate a log, consider using logging_log instead */
void logging_wrapper(
		const char* function,
		const char* file,
		unsigned line,
		unsigned level,
		const char* fmt, ...);

#define logging_log(level, fmt, args...) logging_wrapper(__func__, __FILE__, __LINE__, level, fmt, ##args)

#ifndef LOGGING_NOLOG
#define logging_debug(fmt, args...) logging_log(LOGGING_DEBUG, fmt, ##args)
#define logging_info(fmt, args...) logging_log(LOGGING_INFO, fmt, ##args)
#define logging_notice(fmt, args...) logging_log(LOGGING_NOTICE, fmt, ##args)
#define logging_warn(fmt, args...) logging_log(LOGGING_WARN, fmt, ##args)
#define logging_error(fmt, args...) logging_log(LOGGING_ERROR, fmt, ##args)
#define logging_panic(fmt, args...) logging_log(LOGGING_PANIC, fmt, ##args)
#endif

#if !defined(LOGGING_TIME_FMT) || !defined(LOGGING_TIME_FMTL)
#define LOGGING_TIME_FMT "%H:%M:%S"
#define LOGGING_TIME_FMTL 8
#endif

#if !defined(LOGGING_USE_SYSLOG)
#if defined(OS_LINUX)
#define LOGGING_USE_SYSLOG 1
#else
#define LOGGING_USE_SYSLOG 0
#endif
#endif

#if !defined(LOGGING_DEFAULT_WRITER)
#define LOGGING_DEFAULT_WRITER logging_writer_coloured
#endif


#endif
